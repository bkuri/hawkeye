// Generated by CoffeeScript 1.6.2
'use strict';
var App, CONFIG_TEMPLATE, CoffeeScript, Inotify, MiniLog, NA, VERSION, app, args, deploy, fs, inotify, log, logBackend, minimatch, path;

CONFIG_TEMPLATE = {
  '.': {
    '*': "echo %% was just modified!"
  }
};

NA = '[not available]';

VERSION = '0.1.4';

args = require('commander');

CoffeeScript = require('../node_modules/coffee-script');

deploy = require('child_process').exec;

fs = require('fs');

Inotify = require('inotify').Inotify;

inotify = new Inotify();

minimatch = require('minimatch');

path = require('path');

MiniLog = require('minilog');

log = MiniLog('hawkeye');

logBackend = MiniLog.backends.nodeConsole;

MiniLog.pipe(logBackend).format(logBackend.formatNpm);

App = (function() {
  App.createConfig = function(file) {
    return fs.writeFile(file, JSON.stringify(CONFIG_TEMPLATE, null, 4), function(error) {
      if (error) {
        log.error(error);
      } else {
        log.info("created config file '" + file + "'");
      }
      return process.exit(error ? 1 : 0);
    });
  };

  function App(config, verbose) {
    var _this = this;

    if (verbose == null) {
      verbose = false;
    }
    this.addItem = function(dir, globs) {
      var callback, error, props;

      callback = function(event) {
        var file, glob, warhead, _i, _len, _ref, _results;

        file = event.name || NA;
        _ref = Object.keys(globs);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          glob = _ref[_i];
          if (minimatch(file, glob)) {
            if (verbose) {
              log.info("matched target " + file + " with directive '" + glob + "'");
            }
            warhead = globs[glob].replace('%%', path.join(dir, file));
            if (verbose) {
              log.info("deploying warhead '" + warhead + "'");
            }
            _results.push(deploy(warhead, function(error, stdout, stderr) {
              if (error) {
                return log.error(stderr);
              } else {
                return log.debug(stdout ? stdout : NA);
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      try {
        return process.chdir(path.dirname(config));
      } catch (_error) {
        error = _error;
        log.error(error);
        return process.exit(1);
      } finally {
        dir = path.resolve(dir);
        if (verbose) {
          log.info("tracking target '" + dir + "'");
        }
        props = {
          path: dir,
          watch_for: Inotify.IN_CLOSE_WRITE,
          callback: callback
        };
        inotify.addWatch(props);
      }
    };
    this.destroy = function() {
      if (verbose) {
        log.info("hawkeye down");
      }
      return inotify.close();
    };
    if (verbose) {
      log.info("version " + VERSION + " deployed");
    }
    fs.readFile(config, 'utf-8', function(error, data) {
      var item, items, _i, _len, _ref, _results;

      if (error) {
        log.error("error opening file '" + config + "'. Check your syntax.");
        process.exit(1);
      }
      if (verbose) {
        log.info("opened watch file '" + config + "'");
      }
      items = eval(CoffeeScript.compile(data, {
        bare: true
      }));
      _ref = Object.keys(items);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(_this.addItem(item, items[item]));
      }
      return _results;
    });
  }

  return App;

})();

args.version(VERSION).option('-c, --config <path>', "use this config file").option('-C, --create <path>', "create a new config file").option('-v, --verbose', "output events to stdout").parse(process.argv);

if (args.create) {
  App.createConfig(args.create);
} else {
  app = new App(args.config, args.verbose);
}
